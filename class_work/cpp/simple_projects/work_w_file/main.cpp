#include <iostream>
#include <fcntl.h>

/*
int open(const char *filemane, int flags);
int open(const char *filemane, int flags, mode_t mode);

open() - возвращает файловый  дискриптор , по которому можно обращаться к файлу(если ошибка - возвращает -1)
mode - необходим, когда необходимо создать новый файл, чтобы указать для него режим

заголовочник <fcntl.h>

//ФЛАГИ

O_RDONLY
O_WRONLY
O_RDWR

O_CREAT//создает файл, если он не существовал
O_TRUNC//стирает файл, если он существует
O_APPEND//добавляет в конец файла

O_EXCL//выдает ошибку, при неправильном использовании O_CREAT

O_DSYNC//принудительная синхронгицация записи
O_RSYNC//принудительная синхронизация перед чтением
O_SYNC//принудительная ПОЛНАЯ синхронизация записи

O_NONBLOCK//открыть фапйл в неблокирующем режиме, если это возможно
O_NDELAY//-//-
O_NOCTTY//открывающий файл - терминальное устройство, то не делать его управляющим устройством

O_NOFOLLOW//выдавать ошибку, если открываемый файл яляется символической ссылкой
O_DIRECTORY//выдавать ошибку, если открываемый файл не является директорией
O_DIRECT//попытаться минимизировать кэширование чтения/записи файла

O_ASYNC//генерировать сигнал, когда появляется возможность чтения/записи в файл
O_LARGEFILE//разрешить большие файлы, размер которых не может быть представлен больше 2гб


int close(int id);
close() - возвращает 0, если все ок, -1 если все плохо

ssize_t - знаковый тип данных, который соответствует битности ос

ssize_t read(int fd, void *bufer, size_t] count);
//возвращает -1, если ошибка, если чтение состаялось, то возвращает число прочитаных байт

ssize_t write(int fd, const void *bufer, size_t cout);
*/

using namespace std;

int main()
{

    return 0;
}
